################################################################################

# Create single-source application
function(micro_single_app name)
    if(MICRO_FAST_COMPILE)
        add_executable(${name} EXCLUDE_FROM_ALL ${name}.cc)
    else()
        add_executable(${name} ${name}.cc)
    endif()
    target_link_libraries(${name} ${ARGN})
    target_link_libraries(${name} warnings::all)

    if(MICRO_WITH_SANITIZERS)
        add_sanitizers(${name})
    endif()

    if(MICRO_WITH_COTIRE)
        cotire(${name})
    endif()

endfunction()

################################################################################

function(micro_add_library name)
    if(MICRO_FAST_COMPILE)
        add_library(micro_${name} EXCLUDE_FROM_ALL ${ARGN})
    else()
        add_library(micro_${name} ${ARGN})
    endif()
    if(MICRO_WITH_COTIRE)
        cotire(micro_${name})
    endif()
    add_library(micro::${name} ALIAS micro_${name})
endfunction()

################################################################################

function(micro_add_executable name)
    if(MICRO_FAST_COMPILE)
        add_executable(${name} EXCLUDE_FROM_ALL ${ARGN})
    else()
        add_executable(${name} ${ARGN})
    endif()
    if(MICRO_WITH_COTIRE)
        cotire(${name})
    endif()
endfunction()

################################################################################

# Copy header files into the target folder of the build directory
# Only works with relatives paths so far
function(micro_copy_headers name)
    set(target micro_${name})
    if(NOT TARGET ${target})
        message(WARNING "${target} is not a CMake target. micro_copy_headers() will not be run.")
        return()
    endif()

    # Get info on target
    set(TARGET_NAME "${name}")
    get_target_property(TARGET_TYPE ${target} TYPE)
    if(TARGET_TYPE STREQUAL INTERFACE_LIBRARY)
        set(TARGET_SCOPE INTERFACE)
    else()
        set(TARGET_SCOPE PUBLIC)
    endif()

    if(MICRO_COPY_HEADERS)
        # Copy header files
        foreach(filepath IN ITEMS ${ARGN})
            set(filename "${filepath}")
            # get_filename_component(filename "${filepath}" NAME)
            if(${filename} MATCHES ".*\.(hh|h|inl)$")
                configure_file(${filepath} ${PROJECT_BINARY_DIR}/include/${TARGET_NAME}/${TARGET_NAME}/${filename})
            endif()
        endforeach()

        # Set target include directory
        target_include_directories(${target} ${TARGET_SCOPE} ${PROJECT_BINARY_DIR}/include/${TARGET_NAME})
    else()
        # Set target include directory
        target_include_directories(${target} ${TARGET_SCOPE} ..)
    endif()

endfunction()

################################################################################

function(micro_target_hide_warnings)
    foreach(name IN ITEMS ${ARGN})
        message(STATUS "Hiding warnings for target ${name}")
        get_target_property(target_type ${name} TYPE)

        # Hide warnings from interface headers
        get_target_property(TARGET_INCLUDE_DIR ${name} INTERFACE_INCLUDE_DIRECTORIES)
        if(TARGET_INCLUDE_DIR)
            set_target_properties(${name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "")
            target_include_directories(${name} SYSTEM INTERFACE ${TARGET_INCLUDE_DIR})
        endif()

        if(NOT ${target_type} STREQUAL "INTERFACE_LIBRARY")
            # Hide warnings from private headers
            get_target_property(TARGET_INCLUDE_DIR ${name} INCLUDE_DIRECTORIES)
            if(TARGET_INCLUDE_DIR)
                set_target_properties(${name} PROPERTIES INCLUDE_DIRECTORIES "")
                target_include_directories(${name} SYSTEM PRIVATE ${TARGET_INCLUDE_DIR})
            endif()

            # Hide warnings generated by the files themselves
            if(NOT DEFINED MICRO_IS_SUPPORTED_NO_WARNING)
                include(CheckCXXCompilerFlag)
                check_cxx_compiler_flag("-w" MICRO_IS_SUPPORTED_NO_WARNING)
            endif()
            if(MICRO_IS_SUPPORTED_NO_WARNING)
                target_compile_options(${name} PRIVATE "-w")
            endif()
        endif()
    endforeach()
endfunction()
