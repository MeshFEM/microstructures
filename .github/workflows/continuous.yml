name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux / macOS
  ####################

  # Unix:
  #   name: ${{ matrix.name }} (${{ matrix.config }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-20.04, macos-latest]
  #       config: [Release, Debug]
  #       include:
  #         - os: macos-latest
  #           name: macOS
  #         - os: ubuntu-20.04
  #           name: Linux
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1
  #       with:
  #         fetch-depth: 10

  #     - name: Dependencies (Linux)
  #       if: runner.os == 'Linux'
  #       run: |
  #           sudo apt-get update
  #           sudo apt-get install \
  #           libboost-program-options-dev \
  #           libboost-filesystem-dev \
  #           libboost-system-dev \
  #           libboost-thread-dev \
  #           libsuitesparse-dev \
  #           libglu1-mesa-dev \
  #           xorg-dev \
  #           ccache

  #     - name: Dependencies (macOS)
  #       if: runner.os == 'macOS'
  #       run: brew install boost suite-sparse ccache

  #     - name: Cache Build
  #       id: cache-build
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.ccache
  #         key: ${{ runner.os }}-${{ matrix.config }}-cache

  #     - name: Prepare ccache
  #       run: |
  #         ccache --max-size=1.0G
  #         ccache -V && ccache --show-stats && ccache --zero-stats

  #     - name: Configure
  #       run: |
  #         mkdir -p build
  #         cd build
  #         cmake .. \
  #           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
  #           -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
  #           -DMESHFEM_PREFER_SYSTEM_CERES=OFF

  #     - name: Build
  #       run: cd build; make -j2; ccache --show-stats

  #     - name: Tests
  #       run: cd build; ctest --verbose

  ####################
  # Windows
  ####################

  Windows:
    runs-on: windows-2019
    env:
      CC: cl.exe
      CXX: cl.exe
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set env
        run: |
          echo "BOOST_ROOT=$env:BOOST_ROOT_1_72_0" >> ${env:GITHUB_ENV}
          echo "appdata=$env:LOCALAPPDATA" >> ${env:GITHUB_ENV}

      - run: echo %PATH%
        shell: cmd

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: microstructures
          environment-file: conda.yml
          auto-activate-base: false

      - name: Cache build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-cache

      - run: echo %PATH%
        shell: cmd

      - name: Prepare sccache
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install sccache --global
          # Scoop modifies the PATH so we make it available for the next steps of the job
          echo "C:\ProgramData\scoop\shims;C:\Users\runneradmin\scoop\shims" >> ${env:GITHUB_PATH}

      - run: echo %PATH%
        shell: cmd

      - run: echo %PATH%
        shell: cmd /C CALL {0}

      - name: Set VS dev env
        shell: cmd /C CALL {0}
        run: |
          :: Set VS dev environment, see https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 -vcvars_ver=14.2
          echo %PATH%

        # We run configure + build in the same step, since they both need to call VsDevCmd
        # Also, cmd uses ^ to break commands into multiple lines (in powershell this is `)
      - name: Configure and build
        shell: cmd /C CALL {0}
        run: |
          :: Set VS dev environment, see https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 -vcvars_ver=14.2

          :: Now we can call cmake and build
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -DMESHFEM_FORCE_Z7=ON ^
            -DMESHFEM_PREFER_SYSTEM_CERES=OFF ^
            -DCMAKE_JOB_POOLS="pool-linking=1;pool-compilation=2" ^
            -DCMAKE_JOB_POOL_COMPILE:STRING=pool-compilation ^
            -DCMAKE_JOB_POOL_LINK:STRING=pool-linking ^
            -B build ^
            -S .

          cmake --build build

      - name: Tests
        run: cd build; ctest --verbose
